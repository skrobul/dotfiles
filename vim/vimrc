" {{{ vim-plug auto installation
"
set shell=/bin/bash

if has("nvim")
    if empty(glob('~/.config/nvim/autoload/plug.vim'))
      silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall
    endif
endif

if ! has("nvim")
    if empty(glob('~/.vim/autoload/plug.vim'))
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall
    endif
endif

" }}}
" {{{  Enabled plugins
" set the runtime path to include Vundle and initialize

call plug#begin('~/.vim/bundle')

" Plug 'tpope/vim-fugitive'              " git wrapper
Plug 'lambdalisue/gina.vim'            " better git wrapper...
Plug 'honza/vim-snippets'              " actual snippets
" Plug 'SirVer/ultisnips' ", { 'on' : [] }            code snippets
Plug 'tomtom/tcomment_vim'             " easy comments
Plug 'rstacruz/sparkup'                " parser for condensed HTML
Plug 'jwhitley/vim-matchit'            " better jumping with %
Plug 'tpope/vim-endwise'                     " wisely 'end' functions etc
Plug 'kchmck/vim-coffee-script'        " coffe script support
Plug 'plasticboy/vim-markdown'         " markdown syntax
Plug 'tpope/vim-repeat'                " extend support for repeating with .
Plug 'tpope/vim-surround'              " quickly surround
Plug 'scrooloose/nerdtree' , { 'on': 'NERDTreeToggle' }  " file manager
Plug 'tpope/vim-dispatch'              " start stuff in background
Plug 'nelstrom/vim-textobj-rubyblock'  " text object for selecting ruby blocks
Plug 'kana/vim-textobj-user'           " dependency for vim-textobj-rubyblock
Plug 'christoomey/vim-tmux-navigator'  " seamless navigation between tmux panes and splits
Plug 'tpope/vim-unimpaired'            " set of movement mappings
Plug 'tpope/vim-eunuch'                " Chmod, rename, delete etc
Plug 'henrik/vim-qargs'                " adds :Qargs command
Plug 'dhruvasagar/vim-table-mode'      " helps with creating tables
Plug 'benmills/vimux'                  " interact with tmux
Plug 'fmoralesc/vim-pad'               " Evernote replacement
Plug 'gregsexton/gitv'                 " gitk for vim
Plug 'nathanaelkane/vim-indent-guides' " visual indent
Plug 'idanarye/vim-merginal'           " help with merges and rebase
Plug 'junegunn/vim-easy-align'         " easy alignment
Plug 'mattn/gist-vim'                  " create GIST from vim
Plug 'mattn/webapi-vim'                " create GIST from vim
Plug 'rking/ag.vim'                    " vim-ag
Plug 'justinmk/vim-sneak'
Plug 'slim-template/vim-slim'           " slim templating support
" color packages
Plug 'mhinz/vim-janah'
Plug 'morhetz/gruvbox'                  " gruvbox color scheme
Plug 'vimoutliner/vimoutliner'          " vim outliner
Plug 'leafgarland/typescript-vim'       " Typescript syntax
Plug 'Shougo/vimproc.vim', {'do' : 'make'} " Dependency for tsuquyomi
Plug 'Quramy/tsuquyomi'                 " typescript completion
Plug 'KabbAmine/vCoolor.vim'            " color picker
Plug 'airblade/vim-gitgutter'
Plug 'hwartig/vim-seeing-is-believing'  "inline ruby
Plug 'kassio/neoterm'
Plug 'janko-m/vim-test'                 "vim-test
Plug 'shime/vim-livedown'
Plug 'ClockworkNet/vim-apparmor'
" Plug 'fholgado/minibufexpl.vim'
Plug 'arcticicestudio/nord-vim', { 'branch': 'develop' }
Plug 'andrewstuart/vim-kubernetes'
Plug 'w0rp/ale'
Plug 'Glench/Vim-Jinja2-Syntax'
"Plug 'thoughtbot/vim-rspec'
Plug 'vim-ctrlspace/vim-ctrlspace'            " projectile a-like
Plug 'jreybert/vimagit'                       " vimagit
Plug 'neoclide/coc.nvim',{'branch':'release'} " completion
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'jceb/vim-orgmode'
" }}}
" {{{ DISABLED Plugs
" Plug 'tpope/vim-rvm'                   " RVM support
" Plug 'mrtazz/simplenote.vim'           " simplenote support
" Plug 'cseelus/vim-colors-clearance'
" Plug 'MaxSt/FlatColor'
" Plug 'blerins/flattown'
" Plug 'rizzatti/dash.vim' - disabled  - took way too long to startup
" Plug 'tpope/vim-bundler' " probably not needed (Jul 2015)
" Plug 'mattly/iterm-colors-pencil'
" Plug 'reedes/vim-colors-pencil'
" Plug 'tpope/vim-rails' "set of rails helpers
" Plug 'skrobul/grb256'          " my version of grb256
" Plug 'vim-scripts/CSApprox'
" Plug 'Lokaltog/vim-easymotion'      " easy motion

" Plug 'git@github.com:Shougo/vimproc.vim.git'
" Plug 'Shougo/unite.vim'             " maybe ctrlp replacement
" Plug 'Shougo/neomru.vim'            " MRU functionality for Unite.vim
" Plug 'tpope/vim-obsession'          "session management
" Plug 'dhruvasagar/vim-prosession'   "switch between sessions
" Plug 'kien/ctrlp.vim'                  " full path fuzzy finder
" Plug 'jgdavey/vim-turbux'              " Turbo Ruby testing with tmux
" All of your Plugs must be added before the following line

call plug#end()
" }}}
" Autocmd {{{
if has('autocmd')
    filetype plugin indent on
    augroup indentations
        "don't expand tabs if we're in a makefile
        autocmd BufRead,BufNewFile Makefile set ts=4 sw=4 noexpandtab
        "wrap lines in TeX
        autocmd BufRead,BufNewFile *.tex set tw=80
        "wrap lines in .txt files
        autocmd BufNewFile,BufRead *.txt set tw=78
        autocmd BufNewFile,BufRead *.md set tw=78
        " salt states are just yaml files
        autocmd BufNewFile,BufRead *.sls set ft=yaml sw=2 ts=2
        autocmd FileType ruby,eruby set sw=2 ts=2 tw=80
        autocmd FileType coffee set sw=2 ts=2 tw=80
        autocmd FileType python set ts=4 sw=4 et
        autocmd FileType yaml,yml set sw=2 ts=2 tw=80
    augroup END
    augroup completions
        autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
        autocmd FileType css set omnifunc=csscomplete#CompleteCSS
        autocmd FileType python set omnifunc=pythoncomplete#Complete
        autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
    augroup END

    augroup autocorrections
        autocmd!
        " remove trailing whitespaces
        autocmd BufWritePre ruby,eruby,markdown,yaml,yml,javascript,python :%s/\s\+$//e
    augroup END

    augroup markdown
        autocmd!
        autocmd BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,README.md  setf markdown
        autocmd FileType markdown setlocal spell
        autocmd FileType markdown set complete+=k
        autocmd FileType markdown set tw=80 conceallevel=3 wrap
    augroup end

    augroup git
        autocmd!
        " enable spelling on GIT commit messages
        autocmd FileType gitcommit setlocal spell
        " enable auto word wrap in commit messages
        autocmd FileType gitcommit set sw=2 ts=2 tw=80 aw complete+=k
        " enable spelling and autowrap on pull requests
        autocmd VimEnter .git/PULLREQ_EDITMSG nested setlocal filetype=markdown tw=150
        autocmd FileType gitrebase noremap <CR> :Cycle<CR>
    augroup end

    " jump to the last cursor position
    augroup resCur
      autocmd!
      autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal g`\"" |
            \ endif
    augroup END

    augroup ansible
        autocmd BufRead,BufNewFile */host_vars/* set ft=yaml
        autocmd BufRead,BufNewFile */group_vars/* set ft=yaml
        autocmd BufRead,BufNewFile *.j2 set ft=jinja
    augroup END

    augroup BWCCreateDir
        autocmd!
        autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
    augroup END
endif " }}}
" VIM Settings {{{
" syntax highlighting
syntax enable

set bs=2                " Allow backspacing over everything in insert mode
set ai                  " Always set auto-indenting on
"set backup             " Keep a backup file
"set viminfo='20,\"50   " read/write a .viminfo file -- limit to only 50
set history=50          " keep 50 lines of command history
set ts=4                " 4 space wide tabs
set sw=4
set softtabstop=4     "makes backspacing over spaced out tabs work real nice
set expandtab           "expand tabs to spaces
set ignorecase
set background=dark     "awesome for terminals with crappy colors (putty!)
set tagstack            "lets you push and pop your jumps with ctrl+]
set pastetoggle=<F11>   "when you're pasting stuff this keeps it from getting
                        "all whacked out with indentation
set showmode
set smarttab
set nrformats-=octal
set ttimeout
set ttimeoutlen=100
set incsearch
set spellfile=~/dotfiles/vim/spell/en.utf-8.add
set modelines=5         " check for vim settings in X lines of read file
set complete-=k         " autocompletion - disable dictionary based
set hlsearch
set ignorecase
set smartcase
set hidden " do not save history when leaving buffer
set foldlevelstart=1
set formatoptions=tcrqnj
set diffopt=filler
" set lazyredraw
set number
set relativenumber
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif
" set cursorline

" explorer
let g:explVertical=1      " Split vertically
let g:explSplitRight=1    " Put new window to the right of the explorer

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
" Always hide the statusline
set laststatus=1
set ruler               " Show the cursor position all the time
set rulerformat=%30(%<%m%y%h%r%=%l,%c\ %P%)
set showcmd
set wildmode=longest,list,full
set wildmenu

set autoread " reads the file when it has been changed outside vim
" set encoding=utf-8

" files related
set nobackup
set nowritebackup
set directory=$HOME/.cache/vim//
set fileformats=unix,dos,mac

" Searching in the menu
set completeopt=menuone,longest,preview

set clipboard=unnamed
" Make 81st column stand out
highlight ColorColumn ctermbg=Brown ctermfg=Black
call matchadd('ColorColumn', '\%81v', 100)

" let &colorcolumn=join(range(81,999),",")

"====[ Make tabs, trailing whitespace, and non-breaking spaces visible ]======
"exec "set listchars=tab:\uBB\uBB,trail:•,nbsp:~"
set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨

highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set nolist
set showbreak=↪


" move focus to correct place after the split
set splitright " ... to the right of current pane
set splitbelow " open splits below current pane
" show matching parens
set showmatch
if has("nvim")
  set clipboard+=unnamedplus
endif
set wildignore+=**/node_modules
" }}}
" normal mode mappings (general) {{{
nnoremap <silent> <Leader>q :nohlsearch<CR><C-L>
nnoremap <CR> :noh<CR><CR>

" Replace all occurences of word under cursor
nnoremap <Leader>z :%s/\<<C-r><C-w>\>//g<Left><Left>
" space bar folding
nnoremap  <silent>  <space> :exe 'silent! normal! za'.(foldlevel('.')?'':'l')<cr>

" Buffers - explore/next/previous: Alt-F12, F12, Shift-F12.
nnoremap <F12> :bn<CR>
nnoremap <S-F12> :bp<CR>

" disable arrows
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" Don't use Ex mode, use Q for formatting
map Q gq

" Smart way to move btw. windows
" map <C-j> <C-W>j
" map <C-k> <C-W>k
" map <C-h> <C-W>h
" map <C-l> <C-W>l

" lookup in Dash
nmap <silent> <leader>d <Plug>DashSearch

" buffer navigation
" new buffer (empty)
nmap <silent> <leader>bt :enew<CR>
" next buffer
nmap <silent> <leader>n :bnext<CR>
" previous buffer
nmap <silent> <leader>p :bprevious<CR>
"close the buffer and replace with previous
nmap <silent> <leader>bc :bp <BAR> bd #<CR>
"close the buffer
nmap <silent> <leader>bd :bd<CR>
" show all open buffers in buffer explorer
" nmap <silent> <leader>b :ls<CR>
" nmap <silent> <leader>b :CtrlPBuffer<cr>
map <Leader>bl :Buffers<CR>
vmap <Leader>bl :Buffers<CR>

map ' :Buffers<CR>
vmap ' :Buffers<CR>
" ruby context endings - insert marks
nmap <Leader>z /end%y$%A # p:nohlsearch

" Map `kj` to ESC
imap kj <ESC>

" automatically insert a \v before any search string, so search uses normal regexes
nnoremap / /\v
vnoremap / /\v

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Easy reloading of vimrc
map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Switch to alternative file quickly
" nnoremap <Tab><Tab> <C-^>

if has("nvim")
    " neovim's terminal
    tnoremap <C-h> <C-\><C-n><C-w>h
    tnoremap <C-j> <C-\><C-n><C-w>j
    tnoremap <C-k> <C-\><C-n><C-w>k
    tnoremap <C-l> <C-\><C-n><C-w>l
    nnoremap <A-h> <C-w>h
    nnoremap <A-j> <C-w>j
    nnoremap <A-k> <C-w>k
    nnoremap <A-l> <C-w>l
endif


" autocmd BufEnter term://* startinsert

" bad habits from spacemacs...
nnoremap <silent> <leader>fs :write<cr>
nnoremap <silent> <leader>fR :write<cr>

" }}}
" visual mode mappings {{{

" indent / deindent after selecting the text with (⇧ v), (.) to repeat.
vnoremap <Tab> >
vnoremap <S-Tab> <
" comment / decomment & normal comment behavior
vmap <C-m> gc
" Text wrap simpler, then type the open tag or ',"
vmap <C-w> S
" Cut, Paste, Copy
vmap <C-x> d
vmap <C-v> p
vmap <C-c> y

" "}}}
" gui related stuff {{{
if has("gui_running")
   let s:uname = system("uname")
   if s:uname == "Darwin\n"
      set guifont=Sauce\ Code\ Powerline:h14
      set guioptions-=r
   endif
endif
" }}}
" Plugins config {{{
" {{{ vim-markdown
" let g:vim_markdown_folding_disabled=0
let g:vim_markdown_folding_disabled = 0
let g:vim_markdown_new_list_item_indent = 2
" }}}
" NERDTree - autoclose when last buffer {{{
map <F4> :NERDTreeToggle<CR>
" }}}
" instant markdown {{{
let g:instant_markdown_slow = 1
" "}}}
" tcomment {{{
let g:tcomment#replacements_xml={}
" }}}
" fugitive {{{
" nnoremap <Leader>ga :Git add %:p<CR><CR>
" nnoremap <Leader>gs :Gstatus<CR>
" nnoremap <Leader>gc :Gcommit -v -q<CR>
" nnoremap <Leader>gt :Gcommit -v -q %:p<CR>
" nnoremap <Leader>gd :Gdiff<CR>
" nnoremap <Leader>ge :Gedit<CR>
" nnoremap <Leader>gr :Gread<CR>
" nnoremap <Leader>gw :Gwrite<CR><CR>
" nnoremap <Leader>gl :silent! Glog<CR>:bot copen<CR>
" nnoremap <Leader>gp :Ggrep<Space>
" nnoremap <Leader>gm :Gmove<Space>
" nnoremap <Leader>gb :Git branch<Space>
" nnoremap <Leader>go :Git checkout<Space>
" nnoremap <Leader>gps :Gpush<CR>
" nnoremap <Leader>gpl :Gpull<CR>
" git merges
map <silent> <leader>2 :diffget LOCAL<CR> :diffupdate<CR>
map <silent> <leader>3 :diffget REMOTE<CR> :diffupdate<CR>
" gitv
nnoremap <Leader>gv :Gitv --all<CR>
nnoremap <Leader>gV :Gitv! --all<CR>
vmap <leader>gV :Gitv! --all<cr>

" }}}
" gina {{{
nnoremap <Leader>gs :Gina status<CR>
nnoremap <Leader>gc :Gina commit -v<CR>
nnoremap <Leader>gp :Gina push<CR>
nnoremap <Leader>gl :Gina log<CR>
" use C to switch between the status/commit section
autocmd FileType gina-status
      \ nnoremap <silent><buffer> gc
      \ :<C-u>Gina commit<CR>
autocmd FileType gina-commit
      \ nnoremap <silent><buffer> gs
      \ :<C-u>Gina status<CR>
call gina#custom#mapping#nmap('status', '<C-n>', 'j<Plug>(gina-show-preview)')
call gina#custom#mapping#nmap('status', '<C-p>', 'k<Plug>(gina-show-preview)')
" open three way diffs in vertical
set diffopt+=vertical
"}}}
" Geeknote markdown by default {{{2
let g:GeeknoteFormat="markdown"
"}}}
" {{{2 prosession configuration
let g:prosession_dir = '~/.vim/session/'
let g:prosession_tmux_title = 1
"}}}
" vim-pad {{{2
let g:pad#dir = '~/Dropbox/notes'
let g:pad#maps#new = "<meta>n"
let g:pad#search_backend = 'ag'
let g:pad#default_format = "votl"
let g:pad#default_file_extension = '.otl'
"let g:pad#window_height = 25
let g:pad#open_in_split = 0   " open in main window

let g:pad#title_first_line = 1
" disable default mappings

let g:pad#set_mappings = 0
nmap <silent> <F1> <Plug>(pad-list)
nmap <silent> <F2> <Plug>(pad-new)
nmap ,pl <Plug>(pad-list)
nmap ,pn <Plug>(pad-new)
nmap ,ps <Plug>(pad-incremental-new-note)

" bug workaround
" see https://github.com/fmoralesc/vim-pad/issues/75#issuecomment-257467586

" switching between markdown and otl
function! PadMarkdown()
    set ft=markdown
    call Rename(expand("%:r") . ".md", '')
    let g:pad#default_format = "markdown"
    let g:pad#default_file_extension = '.md'
endfunction
command! -bar PadMarkdown call PadMarkdown()

function! PadOTL()
    set ft=votl
    call Rename(expand("%:r") . ".votl", '')
    let g:pad#default_format = "votl"
    let g:pad#default_file_extension = '.otl'
endfunction
command! -bar PadOTL call PadMarkdown()
"}}}
" easy align{{{2
"
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
"
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
""}}}
" vim-gist {{{2
let g:gist_api_url = 'https://github.rackspace.com/api/v3'
let g:gist_post_private = 1
let g:gist_show_privates = 1
""}}}
" vim-ruby {{{
let g:ruby_indent_block_style = 'do'
" }}}
" ag - The Silver Searcher {{{
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
" let g:ag_prg="/usr/local/bin/ag --vimgrep"

" }}}
" vim-outliner {{{
" autocmd! FileType votl inoremap <C-n> <ESC>:call UltiSnips#ExpandSnippet()<CR>i
autocmd! FileType votl inoremap <C-n> <Esc>:call UltiSnips#ExpandSnippetOrJump()<CR>
autocmd! FileType votl set nolist foldlevel=1

" }}}
" tsuquyomi {{{
" disable neomake makers for typescript to avoid duplication
let g:neomake_typescript_enabled_makers = []
let g:tsuquyomi_disable_default_mappings = 1
" }}}
" tmux-navigate {{{
" temp fix for https://github.com/neovim/neovim/issues/2048
if has('nvim')
    nmap <silent> <BS> :TmuxNavigateLeft<CR>
endif
" }}}
" {{{ tableize / table mode
let g:table_mode_map_prefix = "<leader>y"
let g:table_mode_corner='|' "markdown tables"

" }}}
" {{{ seeing is believing
" Enable seeing-is-believing mappings only for Ruby
augroup seeingIsBelievingSettings
  autocmd!

  autocmd FileType ruby nmap <buffer> <M-Enter> <Plug>(seeing-is-believing-mark-and-run)
  autocmd FileType ruby xmap <buffer> <M-Enter> <Plug>(seeing-is-believing-mark-and-run)

  autocmd FileType ruby nmap <buffer> <F5> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby xmap <buffer> <F5> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby imap <buffer> <F5> <Plug>(seeing-is-believing-mark)

  autocmd FileType ruby nmap <buffer> <F6> <Plug>(seeing-is-believing-run)
  autocmd FileType ruby imap <buffer> <F6> <Plug>(seeing-is-believing-run)
augroup END
" }}}
" {{{ vim-test
nnoremap <silent> ,rt :TestSuite<cr>
nnoremap <silent> ,rf :TestFile<cr>
nnoremap <silent> ,rn :TestNearest<cr>
nnoremap <silent> ,rr :TestLast<cr>
nnoremap <silent> ,rv :TestVisit<cr>
" Useful maps
" hide/close terminal
nnoremap <silent> ,th :call neoterm#close()<cr>
" clear terminal
nnoremap <silent> ,tl :call neoterm#clear()<cr>
" kills the current job (send a <c-c>)
nnoremap <silent> ,tc :call neoterm#kill()<cr>
let test#strategy = "dispatch"
if has('nvim')
  tmap <C-o> <C-\><C-n>
endif

let g:dispatch_compilers = {}
let g:dispatch_compilers['bundle exec'] = ''
let g:dispatch_compilers['rspec'] = 'rspec'

" }}}
" vim-livedown {{{
" should markdown preview get shown automatically upon opening markdown buffer
let g:livedown_autorun = 0

" should the browser window pop-up upon previewing
let g:livedown_open = 1

" the port on which Livedown server will run
let g:livedown_port = 1337

nmap gm :LivedownToggle<CR>
" }}}
" {{{ vim-rspec
map <Leader>tf :call RunCurrentSpecFile()<CR>
map <Leader>tn :call RunNearestSpec()<CR>
map <Leader>tl :call RunLastSpec()<CR>
map <Leader>ta :call RunAllSpecs()<CR>
"let g:rspec_command = "Dispatch -compiler=rspec bundle exec rspec {spec} --format=progress"
" Yoinked from rails.vim to support rspec keyword highlighting outside Rails
" project folders
autocmd BufRead *_spec.rb syn keyword rubyRspec describe context it its specify shared_context shared_examples shared_examples_for shared_context include_examples include_context it_should_behave_like it_behaves_like before after around subject scenario feature background given described_class violated pending expect expect_any_instance_of allow allow_any_instance_of double instance_double mock xit fit
highlight def link rubyRspec Function

if has("nvim")
  let g:rspec_command = ':call RunMySpecs("{spec}")'

  function! RunMySpecs(specs)
    execute 'split | terminal bundle exec rspec ' . a:specs
    execute feedkeys("\<c-\>\<c-n>")
  endfunction
endif
" }}}
" {{{ ale
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_save = 1
" }}}
" {{{ coc.vim
" if hidden is not set, TextEdit might fail.
set hidden
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup
" Better display for messages
set cmdheight=2
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-s-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
"nmap <silent> <C-d> <Plug>(coc-range-select)
"xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <leader>ca  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <leader>ce  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>
" Search workleader symbols
nnoremap <silent> <leader>cs  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <leader>cj  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <leader>ck  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <leader>cp  :<C-u>CocListResume<CR>

" List of installed coc extensions
let g:coc_global_extensions = [
            \ 'coc-css',
            \ 'coc-html',
            \ 'coc-json',
            \ 'coc-emmet',
            \ 'coc-eslint',
            \ 'coc-lists',
            \ 'coc-prettier',
            \ 'coc-solargraph',
            \ 'coc-snippets',
            \ 'coc-tsserver',
            \ 'coc-vetur',
            \ 'coc-yaml'
            \ ]

map <C-p> :CocList files<CR>
vmap <C-p> :CocList files<CR>
" }}}
" {{{ ctrl-space
let g:CtrlSpaceDefaultMappingKey = "<C-space> "
" end of plugin config }}}
"{{{ colorscheme
if has('termguicolors')
    set termguicolors
endif
colorscheme gruvbox
let g:gruvbox_improved_strings = 1
let g:gruvbox_improved_warnings = 1

" local modifications
" search results blue instead of orange
" hi Search ctermfg=234 ctermbg=221 guifg=#101112 guibg=#B7C0C9
" more distinct line nr
"hi LineNr ctermfg=237 guibg=#2F3339 guifg=#707885

" fix gitgutter background
"hi GitGutterAdd ctermfg=2 guifg=#009900 guibg=#2F3339
"hi GitGutterDelete ctermfg=1 guifg=#ff2222 guibg=#2F3339
"hi GitGutterChange ctermfg=3 guifg=#bbbb00 guibg=#2F3339

" color constants with blue instead of orange
"hi Type ctermfg=173 guifg=#23A1D3
"}}}
" custom commands {{{
" bind \a (backward slash) to grep shortcut
"command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
" map ag to leader a
nnoremap <Leader>sa :Ag<SPACE>
function! ArrayConvertToW()
    execute "normal /=\s+<cr>evf]"
    s/\%V,/ /ge
    s/\v\[(.*)\]/%w(\1)/
 endfunction
 command! ArrayConvertToW :call ArrayConvertToW()<cr>
" json prettyfiy
command! JSONPretty %!python -m json.tool
" ruby - convert hashes to 1.9+ syntax
command! NewRubyHashes :%s/:\([^ ]*\)\(\s*\)=>/\1:/g
" retab to n spaces
command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g
" load all feature branch commits into buffer
command! PRlog Glog master..HEAD --reverse --

" create file with subdirectories if needed :E
function! s:MKDir(...)
    if         !a:0
           \|| stridx('`+', a:1[0])!=-1
           \|| a:1=~#'\v\\@<![ *?[%#]'
           \|| isdirectory(a:1)
           \|| filereadable(a:1)
           \|| isdirectory(fnamemodify(a:1, ':p:h'))
        return
    endif
    return mkdir(fnamemodify(a:1, ':p:h'), 'p')
endfunction
command! -bang -bar -nargs=? -complete=file E :call s:MKDir(<f-args>) | e<bang> <args>

function! s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
" Useful trick when I've forgotten to `sudo' before editing a file:
cmap w!! w !sudo tee % >/dev/null


" }}}
" local machine config {{{
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
"}}}
" vim: foldmethod=marker foldlevel=0
